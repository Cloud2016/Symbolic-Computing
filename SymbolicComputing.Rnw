
\documentclass[a4paper]{ctexart}
\usepackage[left=2.0cm,right=2.0cm,top=2.5cm,bottom=2.5cm]{geometry}
\usepackage{xltxtra}

\begin{document}

\title{R语言做符号计算}
\author{黄湘云}
\date{\today}
\maketitle

\tableofcontents

<<r setup,include=FALSE>>=
knitr::opts_chunk$set(size="normalsize",prompt=FALSE,tidy=TRUE)
@

\section{引言}

谈起符号计算，大家首先想到的可能就是大名鼎鼎的Maple，其次是Mathematica，但是他们都是商业软件，除了昂贵的价格外，对于想知道底层，并做一些修改的极客而言，都是很不可能的。自从遇到R以后，还是果断脱离商业软件的苦海，话说R做符号计算固然比不上Maple，但是你真的需要Maple这样的软件去做符号计算吗？我们看看R语言的符号计算能做到什么程度。

\section{符号计算}
\subsection{符号微分}

在R中能够直接用来符号计算的是表达式，下面以Tetrachoric函数为例，
$$\tau(x)=\frac{(-1)^{j-1}}{\sqrt{j !}}\phi^{(j)}(x)$$
其中
$$\phi(x)=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}$$
在R里，声明表达式对象使用expression函数

<<>>=
NormDensity<-expression(1/sqrt(2*pi)*exp(-x^2/2))
class(NormDensity)
@

计算一阶导数

<<>>=
D(NormDensity,"x") 
deriv(NormDensity,"x")
deriv3(NormDensity,"x") 
@

计算n阶导数

<<>>=
DD <- function(expr, name, order = 1) {
  if(order < 1) stop("'order' must be >= 1")
  if(order == 1) D(expr, name)
  else DD(D(expr, name), name, order - 1)
}
DD(NormDensity, "x", 3)
@

\subsection{表达式转函数}

很多时候我们使用R目的是计算，符号计算后希望可以直接代入计算，那么只需要在deriv中指定function.arg参数为TRUE。

<<>>=
DFun<-deriv(NormDensity,"x",function.arg = TRUE)
DFun(1)
DFun(0)
@

从计算结果可以看出，deriv不仅计算了导数值还计算了原函数在该处的函数值。我们可以作如下简单验证：

<<>>=
Normfun<-function(x) 1/sqrt(2*pi)*exp(-x^2/2)
Normfun(1)
Normfun(0)
@

在讲另外一个将表达式转化为函数的方法之前，先来一个小插曲，有没有觉得之前计算3阶导数的结果太复杂了，说不定看到这的人，早就要吐槽了！这个问题已经有高人写了Deriv包\cite{R-Deriv}来解决，请看：

<<>>=
DD(NormDensity, "x", 3)
library(Deriv)
Simplify(DD(NormDensity, "x", 3))
@

三阶导数根本不在话下，如果想体验更高阶导数，不妨请读者动动手！表达式转函数的关键是理解函数其实是由参数列表(args)和函数体(body)两部分构成，以前面自编的Normfun函数为例

<<>>=
body(Normfun)
args(Normfun)
@

而函数体被一对花括号括住的就是表达式，查看eval函数帮助，我们可以知道eval计算的对象就是表达式。
下面来个小示例以说明此问题。

<<>>=
eval({x<-2;x^2})
eval(body(Normfun))
Normfun(2)
@

至此我们可以将表达式转化为函数，也许又有读者耐不住了，既然可以用eval函数直接计算，干嘛还要转化为函数？这个主要是写成函数比较方便，你可能需要重复计算不同的函数值，甚至放在你的算法的中间过程中......(此处省略500字，请读者自己理解)

终于又回到开篇处Tetrachoric函数，里面要计算任意阶导数，反正现在是没问题了，管他几阶，
算完后化简转函数，请看：

<<>>=
Tetrachoric<-function(x,j){
  (-1)^(j-1)/sqrt(factorial(j))*eval(Simplify(DD(NormDensity,"x",j)))
}
Tetrachoric(2,3)
@

有时候我们有的就是函数，这怎么计算导数呢？按道理，看完上面的过程，这已经不是什么问题啦！

<<>>=
Simplify(D(body(Normfun),"x"))
@

作为本节的最后，献上Tetrachoric函数图像，这个函数的作用主要是计算多元正态分布的概率，详细内容参看\cite{Harris1980The}。

<<eval=TRUE,echo=FALSE,fig.align='center',fig.width=10,fig.height=6>>=
t<-seq(-4,4,length.out = 80)
plot(c(-4,4),c(-0.3,0.3),xlab=expression(x),ylab="",main = expression(Tetrachoric(x)),type = "n")
abline(v=0,h=0,lty=2)

library(RColorBrewer)
n=8 
for (i in seq(n)) {
  lines(t,Tetrachoric(t,i),lty=1,lwd=1.5,type = "l",
        col=brewer.pal(9,"Set1")[1:n][i])
}
legend(-4, .3, legend = paste("n=", seq(n)), col = brewer.pal(9,"Set1")[1:n], lwd = 1)
@

\section{符号计算扩展包}
\subsection{Ryacas 包}

想要做更多的符号计算内容，如解方程，泰勒展开等，可以借助第三方R扩展包Ryacas \cite{Ryacas}

<<warning=FALSE>>=
suppressPackageStartupMessages(library(Ryacas))
yacas("Solve(x/(1+x) == a, x)")
yacas(expression(Expand((1+x)^3)))
yacas("OdeSolve(y''==4*y)")
yacas("Taylor(x,a,3) Exp(x)")
@


\subsection{rSymPy包}

rSymPy是Python的符号计算库SymPy的R接口

<<>>=
library(rSymPy)
x <- Var("x")
x+x
sympy("y = x*x")
sympy("y")
sympy("limit(1/x, x, oo)")
sympy("diff(sin(2*x), x, 1)")
sympy("diff(sin(2*x), x, 5)")
sympy("integrate(exp(-x), (x, 0, oo))")
cat(sympy("A = Matrix([[1,x], [y,1]])"), "\n")
cat(sympy("A**2"), "\n")
@

\section{符号计算在优化算法中的应用}

学过运筹学或者数值分析课程的可能知道，有不少优化算法是要求导或者求梯度的，如拟牛顿算法，最速下降法和共轭梯度法，还有求解非线性方程组的拟牛顿算法及其修正算法。下面以求Rosenbrock函数的极小值为例：

\begin{figure}[htb]
  \centering
    \includegraphics[width=.5\textwidth,height=.5\textwidth]{figure/Rosenbrock.pdf}
  \caption{Rosenbrock函数}
\end{figure}

符号微分

<<>>=
fun<-expression(100*(x2-x1^2)^2+(1-x1)^2)
D(fun,"x1")
D(fun,"x2")
@

调用拟牛顿法求极值

<<>>=
fr <- function(x) {  
    x1 <- x[1]
    x2 <- x[2]
    100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
grr1 <- function(x) { 
    x1 <- x[1]
    x2 <- x[2]
    c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
       200 *      (x2 - x1 * x1))
}
optim(c(-1.2,1), fr, grr1, method = "BFGS")
@

仿照Tetrachoric函数的写法，可以简写grr1函数(这个写法可以稍微避免一点复制粘贴)：

<<>>=
grr2<-function(x){
  x1 <- x[1]
  x2 <- x[2]
  c(eval(D(fun,"x1")),eval(D(fun,"x2")))  # 表达式微分
}
optim(c(-1.2,1), fr, grr2, method = "BFGS")
@

如果调用numDeriv包\cite{numDeriv}，可以再少写点代码：

<<>>=
library(numDeriv)
grr3 <- function(x) {
  x1 <- x[1]
  x2 <- x[2]
  grad(fr,c(x1,x2))  # 函数微分
}
optim(c(-1.2, 1), fr, grr3, method = "BFGS")
@

如果一定要体现符号微分的过程，就调用Deriv包：

<<>>=
library(Deriv)
fr1 <- function(x1,x2) { # 函数形式与上面不同
  100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}

grr2 <- function(x) {
  x1 <- x[1]
  x2 <- x[2]
  Deriv(fr1,cache.exp = FALSE)(x1,x2) # 符号微分
}
optim(c(-1.2, 1), fr, grr2, method = "BFGS")
@
从上面可以看出函数(Deriv与optim)之间不兼容：Deriv与optim接受的函数形式不同，导致两个函数(fr与fr1)的参数列表的形式不一样，应能看出fr这种写法更好些。
\\
注：
\begin{enumerate}
  \item 求极值和求解方程(组)往往有联系的，如统计中求参数的最大似然估计，有不少可以转化为求方程(组)，如stat4包\cite{R-core}的mle函数。  
  \item 目标函数可以求导，使用拟牛顿算法效果比较好，如上例中methods参数设置成CG，结果就会不一样。
  \item nlm、optim和nlminb等函数都实现了带梯度的优化算法。
  \item 不过话又说回来，真实的场景大多是目标函数不能求导，一阶导数都不能求，更多细节请读者参见optim函数帮助。
  \item 还有一些做数值优化的R包，如BB包\cite{BB}求解大规模非线性系统，numDeriv包是数值微分的通用求解器，更多的内容可参见https://cran.rstudio.com/web/views/Optimization.html。
  \item 除了数值优化还有做概率优化的R包，如仅遗传算法就有GA \cite{R-GA}， gafit \cite{R-gafit}，galts \cite{R-galts}， mcga \cite{R-mcga}， rgenoud \cite{R-rgenoud}，gaoptim \cite{R-gaoptim}， genalg \cite{R-genalg}等R包，这方面的最新成果参考文献 \cite{2016arXiv160501931S}。
\end{enumerate}


\section{R软件信息}

<<>>=
sessionInfo()
@

本文是在RStudio环境下用R sweave编写的，用knitr\cite{R-knitr}处理R代码，\XeLaTeX{}编译生成pdf文档。 编译之前安装必要的R包

<<eval=FALSE>>=
Pkgs <- c("Ryacas","numDeriv","Deriv","knitr","rSymPy")
installed.packages(Pkgs)
@

\bibliographystyle{unsrt}
\bibliography{refer.bib}

\end{document}